import{_ as s,v as a,b as n,R as e}from"./chunks/framework.d1204a03.js";const A=JSON.parse('{"title":"Function definitions","description":"","frontmatter":{"title":"Function definitions","lang":"en-US"},"headers":[],"relativePath":"help/contribution/extension-development/function-definitions.md","filePath":"help/contribution/extension-development/function-definitions.md"}'),l={name:"help/contribution/extension-development/function-definitions.md"},t=e(`<h1 id="required-methods" tabindex="-1">Required Methods <a class="header-anchor" href="#required-methods" aria-label="Permalink to &quot;Required Methods&quot;">​</a></h1><h2 id="getmangadetails" tabindex="-1">getMangaDetails <a class="header-anchor" href="#getmangadetails" aria-label="Permalink to &quot;getMangaDetails&quot;">​</a></h2><h3 id="method-signature" tabindex="-1">Method signature <a class="header-anchor" href="#method-signature" aria-label="Permalink to &quot;Method signature&quot;">​</a></h3><p><code>async getMangaDetails(mangaId: string): Promise&lt;Manga&gt;</code></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>mangaId</code></td><td>String</td><td>The ID of a manga. The manga ID is provided from the other discovery functions, such as the home page and performed searches. The manga ID should be used to return information about the manga, such as the title and author.</td></tr></tbody></table><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p>Given an ID, this async function should return a filled out <a href="./model-reference.html#manga">Manga</a> object.</p><h3 id="example-implementation" tabindex="-1">Example Implementation <a class="header-anchor" href="#example-implementation" aria-label="Permalink to &quot;Example Implementation&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">async </span><span style="color:#82AAFF;">getMangaDetails</span><span style="color:#A6ACCD;">(mangaId: string): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Manga</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Create a request object which when executed, will yield a HTML page containing the data needed to fill out a Manga object</span></span>
<span class="line"><span style="color:#A6ACCD;">    const request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRequestObject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">https://yourwebsite.com/manga/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">mangaId</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Execute the request, and retrieve the HTML page</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    this.requestManager is provided to you by the parent class. Always use this to make requests.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    The second parameter is the number of retries the app is allowed to make, if the request fails the first time.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#A6ACCD;">    const data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">requestManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">schedule</span><span style="color:#A6ACCD;">(request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Prepare to parse the page using CheerioJS (Class object included by parent class)</span></span>
<span class="line"><span style="color:#A6ACCD;">    let $ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cheerio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// -- Parse all of the information here --</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ALWAYS use the createManga({ }) wrapper when returning</span></span>
<span class="line"><span style="color:#A6ACCD;">    return </span><span style="color:#F07178;">createManga</span><span style="color:#89DDFF;">({</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mangaId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">titles</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// etc</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="getchapters" tabindex="-1">getChapters <a class="header-anchor" href="#getchapters" aria-label="Permalink to &quot;getChapters&quot;">​</a></h2><h3 id="method-signature-1" tabindex="-1">Method signature <a class="header-anchor" href="#method-signature-1" aria-label="Permalink to &quot;Method signature&quot;">​</a></h3><p><code>async getChapters(mangaId: string): Promise&lt;Chapter[]&gt;</code></p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>mangaId</code></td><td>String</td><td>The ID of a manga. The manga ID is provided from the other discovery functions, such as the home page and performed searches. The manga ID should be used to return information about the manga, such as the title and author.</td></tr></tbody></table><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p>Given an ID, this async function should return an array of <a href="./model-reference.html#chapter">Chapter</a> objects.</p><h3 id="example-implementation-1" tabindex="-1">Example Implementation <a class="header-anchor" href="#example-implementation-1" aria-label="Permalink to &quot;Example Implementation&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">async </span><span style="color:#82AAFF;">getChapters</span><span style="color:#A6ACCD;">(mangaId: string): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Chapter[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Create a request object which when executed, will yield a HTML page containing the data needed to fill out a Manga object</span></span>
<span class="line"><span style="color:#A6ACCD;">    const request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRequestObject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">https://yourwebsite.com/manga/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">mangaId</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Execute the request, and retrieve the HTML page</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    this.requestManager is provided to you by the parent class. Always use this to make requests.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    The second parameter is the number of retries the app is allowed to make, if the request fails the first time.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#A6ACCD;">    const data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">requestManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">schedule</span><span style="color:#A6ACCD;">(request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Prepare to parse the page using CheerioJS (Class object included by parent class)</span></span>
<span class="line"><span style="color:#A6ACCD;">    let $ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cheerio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Prepare a storage location for all available chapters</span></span>
<span class="line"><span style="color:#A6ACCD;">    let </span><span style="color:#F07178;">chapters</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Chapter[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Chances are, you&#39;re going to need to loop over some HTML element which each chapter identifier is displayed in</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;">(let obj </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">$</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someSelector</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toArray</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Parse an individual chapter object&#39;s values here</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        chapters.push(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">createChapter</span><span style="color:#89DDFF;">({</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your manga chapter id here</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">mangaId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mangaId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// etc</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Return a list of all of the chapters discovered</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">chapters</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="getchapterdetails" tabindex="-1">getChapterDetails <a class="header-anchor" href="#getchapterdetails" aria-label="Permalink to &quot;getChapterDetails&quot;">​</a></h2><h3 id="method-signature-2" tabindex="-1">Method Signature <a class="header-anchor" href="#method-signature-2" aria-label="Permalink to &quot;Method Signature&quot;">​</a></h3><p><code>async getChapterDetails(mangaId: string, chapterId: string): Promise&lt;ChapterDetails&gt;</code></p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>mangaId</code></td><td>String</td><td>The ID of a manga. The manga ID is provided from the other discovery functions, such as the home page and performed searches. The manga ID should be used to return information about the manga, such as the title and author.</td></tr><tr><td><code>chapterId</code></td><td>String</td><td>The ID of a chapter. defined by the <a href="#getchapters">Get Chapters</a> method. The chapter ID can only contain letters, numbers, dashes and underscores.</td></tr></tbody></table><h3 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p>Given both a Manga and a Chapter ID, this function should populate a <a href="./model-reference.html#chapterdetails">ChapterDetails</a> object.</p><h3 id="example-implementation-2" tabindex="-1">Example Implementation <a class="header-anchor" href="#example-implementation-2" aria-label="Permalink to &quot;Example Implementation&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">async </span><span style="color:#82AAFF;">getChapterDetails</span><span style="color:#A6ACCD;">(mangaId: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> chapterId: string): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">ChapterDetails</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Create a request object which when executed, will yield a HTML page containing the data needed to fill out a Manga object</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRequestObject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">https://yourwebsite.com/manga/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">mangaId</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">chapterId</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Execute the request, and retrieve the HTML page</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    this.requestManager is provided to you by the parent class. Always use this to make requests.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    The second parameter is the number of retries the app is allowed to make, if the request fails the first time.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">requestManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">schedule</span><span style="color:#A6ACCD;">(request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Prepare to parse the page using CheerioJS (Class object included by parent class)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> $ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cheerio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// -- Parse all of the information here --</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ALWAYS use the createChapterDetails({ }) wrapper when returning</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createChapterDetails</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> chapterId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">mangaId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> mangaId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">longstrip</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pages</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// An array of strings, each being a URL to a page. See the typings for more information.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="searchrequest" tabindex="-1">searchRequest <a class="header-anchor" href="#searchrequest" aria-label="Permalink to &quot;searchRequest&quot;">​</a></h2><h3 id="method-signature-3" tabindex="-1">Method signature <a class="header-anchor" href="#method-signature-3" aria-label="Permalink to &quot;Method signature&quot;">​</a></h3><p><code>async searchRequest(query: SearchRequest, metadata: any): Promise&lt;PagedResults&gt;</code></p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>query</code></td><td><a href="./model-reference.html#searchrequest">SearchRequest</a></td><td>The object representing the search. View the fields of the <a href="./model-reference.html#searchrequest">SearchRequest</a> object to find out what a search can contain.</td></tr><tr><td><code>metadata</code></td><td>any</td><td>Metadata carried through function calls. View the <a href="./metadata.html">metadata page</a> to learn more about how the parameter works.</td></tr></tbody></table><h3 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p>A <a href="./model-reference.html#pagedresults">PagedResults</a> object with the results of the search for the current page, and metadata for the next page, if it exists.</p><h3 id="example-implementation-3" tabindex="-1">Example Implementation <a class="header-anchor" href="#example-implementation-3" aria-label="Permalink to &quot;Example Implementation&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">async </span><span style="color:#82AAFF;">searchRequest</span><span style="color:#A6ACCD;">(query:SearchRequest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> metadata:any): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">PagedResults</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	let page;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// Get the current page the function is on</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">metadata</span><span style="color:#A6ACCD;"> === </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> &amp;&amp; metadata.page</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">page</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">metadata</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">page</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> else </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// If there is no current page, this must mean this is the first page.</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">page</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	const request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRequestObject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">https://mysite.com/search/?query=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&amp;page=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">page</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> GET</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	Execute the request, and retrieve the HTML page</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	this.requestManager is provided to you by the parent class. Always use this to make requests.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	The second parameter is the number of retries the app is allowed to make, if the request fails the first time.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	*/</span></span>
<span class="line"><span style="color:#A6ACCD;">	const data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">requestManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">schedule</span><span style="color:#A6ACCD;">(request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// Prepare to parse the page using CheerioJS (The cheerio object is provided by the base class this extends)</span></span>
<span class="line"><span style="color:#A6ACCD;">	let $ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cheerio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// This will contain the manga tiles that we found</span></span>
<span class="line"><span style="color:#A6ACCD;">	const </span><span style="color:#F07178;">tiles</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> MangaTile[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;">(let obj </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">$</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someSelector</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toArray</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	    </span><span style="color:#676E95;font-style:italic;">// Parse the details in a MangaTile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		tiles.push(createMangaTile</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		    </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mangaId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#FFCB6B;">image</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imageUrl</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#FFCB6B;">title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createIconText</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">				text</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mangaTitle</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	page</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	return createPagedResults</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">results</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> tiles</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F07178;">page</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> page</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h1 id="optional-methods" tabindex="-1">Optional Methods <a class="header-anchor" href="#optional-methods" aria-label="Permalink to &quot;Optional Methods&quot;">​</a></h1><p>To be filled out</p>`,39),p=[t];function o(r,c,i,y,D,F){return a(),n("div",null,p)}const h=s(l,[["render",o]]);export{A as __pageData,h as default};
